# trading_utils.py

import asyncio
import json
import traceback
from datetime import datetime
from shared.logging import get_logger, setup_error_logger
from HYPERRSI.src.core.database import redis_client

logger = get_logger(__name__)
error_logger = setup_error_logger()

def ensure_async_loop():
    """
    ÌòÑÏû¨ Ïä§Î†àÎìúÏóê ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ïù¥Î≤§Ìä∏ Î£®ÌîÑÎ•º Î∞òÌôòÌïòÍ±∞ÎÇò ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§.
    Îã´Ìûå Î£®ÌîÑÎÇò Îã§Î•∏ Ïä§Î†àÎìúÏùò Î£®ÌîÑÎäî ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§.
    """
    try:
        # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Î£®ÌîÑÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        loop = asyncio.get_running_loop()
        logger.debug("Ïã§Ìñâ Ï§ëÏù∏ Ïù¥Î≤§Ìä∏ Î£®ÌîÑÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.")
        return loop
    except RuntimeError:
        # ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Î£®ÌîÑÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞
        pass
    
    try:
        # Í∏∞Ï°¥ Î£®ÌîÑÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        loop = asyncio.get_event_loop()
        
        # Î£®ÌîÑÍ∞Ä Îã´ÌòÄÏûàÎäîÏßÄ ÌôïÏù∏
        if loop.is_closed():
            logger.info("Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Î£®ÌîÑÍ∞Ä Îã´ÌòÄ ÏûàÏñ¥ ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        return loop
    except RuntimeError as ex:
        # Î£®ÌîÑÍ∞Ä ÏïÑÏòà ÏóÜÎäî Í≤ΩÏö∞
        if "There is no current event loop in thread" in str(ex):
            logger.info("Ïù¥Î≤§Ìä∏ Î£®ÌîÑÍ∞Ä ÏóÜÏñ¥ ÏÉàÎ°ú ÏÉùÏÑ±Ìï©ÎãàÎã§")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            return loop
        
        # Í∑∏ Ïô∏ ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò
        logger.error(f"Ïù¥Î≤§Ìä∏ Î£®ÌîÑ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(ex)}")
        raise

async def init_user_position_data(user_id: str, symbol: str, side: str):
    dual_side_position_key = f"user:{user_id}:{symbol}:dual_side_position"
    position_state_key = f"user:{user_id}:position:{symbol}:position_state"
    tp_data_key = f"user:{user_id}:position:{symbol}:{side}:tp_data"
    ts_key = f"trailing:user:{user_id}:{symbol}:{side}"
    dual_side_position_key = f"user:{user_id}:{symbol}:dual_side_position"
    dca_count_key = f"user:{user_id}:position:{symbol}:{side}:dca_count"
    dca_levels_key = f"user:{user_id}:position:{symbol}:{side}:dca_levels"
    position_key = f"user:{user_id}:position:{symbol}:{side}"
    min_size_key = f"user:{user_id}:position:{symbol}:min_sustain_contract_size"
    #main_position_direction_key = f"user:{user_id}:position:{symbol}:main_position_direction"
    tp_state = f"user:{user_id}:position:{symbol}:{side}:tp_state"
    hedging_direction_key = f"user:{user_id}:position:{symbol}:hedging_direction"
    entry_fail_count_key = f"user:{user_id}:entry_fail_count"
    dual_side_count_key = f"user:{user_id}:{symbol}:dual_side_count"
    current_trade_key = f"user:{user_id}:current_trade:{symbol}:{side}"
    
    await redis_client.delete(position_state_key)
    await redis_client.delete(dual_side_position_key)
    await redis_client.delete(tp_data_key)
    await redis_client.delete(ts_key)
    await redis_client.delete(dca_count_key)
    await redis_client.delete(dca_levels_key)
    await redis_client.delete(position_key)
    await redis_client.delete(min_size_key)
    #await redis_client.delete(main_position_direction_key)
    await redis_client.delete(tp_state)
    await redis_client.delete(entry_fail_count_key)
    await redis_client.delete(hedging_direction_key)
    await redis_client.delete(dual_side_count_key)
    await redis_client.delete(current_trade_key)
async def init_user_monitoring_data(user_id: str, symbol: str):
    """
    monitor:user:{user_id}:{symbol}:* Ìå®ÌÑ¥Ïóê Ìï¥ÎãπÌïòÎäî Î™®Îì† ÌÇ§Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
    """
    pattern = f"monitor:user:{user_id}:{symbol}:*"
    
    # patternÏóê ÎßûÎäî Î™®Îì† ÌÇ§ Ï°∞Ìöå
    keys = await redis_client.keys(pattern)
    
    # Ï°∞ÌöåÎêú ÌÇ§Í∞Ä ÏûàÏúºÎ©¥ Î™®Îëê ÏÇ≠Ï†ú
    if keys:
        await redis_client.delete(*keys)
        logger.info(f"ÏÇ¨Ïö©Ïûê {user_id}Ïùò {symbol} Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞Î•º Ï¥àÍ∏∞ÌôîÌñàÏäµÎãàÎã§. ÏÇ≠Ï†úÎêú ÌÇ§ Í∞úÏàò: {len(keys)}")
    else:
        logger.info(f"ÏÇ¨Ïö©Ïûê {user_id}Ïùò {symbol} Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")

class TPPrice:
    def __init__(self):
        self.prices = {}  # price: ratio

async def store_tp_prices(user_id: str, symbol: str, side: str, tp_prices):
    tp_data_key = f"user:{user_id}:position:{symbol}:{side}:tp_data"
    await redis_client.set(tp_data_key, json.dumps(tp_prices))

async def get_tp_prices(user_id: str, symbol: str, side: str):
    tp_data_key = f"user:{user_id}:position:{symbol}:{side}:tp_data"
    data = await redis_client.get(tp_data_key)
    return json.loads(data) if data else {}

async def is_trading_running(user_id: str) -> bool:
    """trading_status ÌôïÏù∏ ÌõÑ 'running'Ïù¥Î©¥ True, ÏïÑÎãàÎ©¥ False."""
    status = await redis_client.get(f"user:{user_id}:trading:status")
    
    # Î∞îÏù¥Ìä∏ Î¨∏ÏûêÏó¥ÏùÑ ÎîîÏΩîÎî©
    if isinstance(status, bytes):
        status = status.decode('utf-8')
        
    return (status == "running")

async def calculate_dca_levels(entry_price: float, last_filled_price:float ,settings: dict, side: str, atr_value: float, current_price: float, user_id: str) -> list:
    pyramiding_entry_type = settings.get('pyramiding_entry_type', 'ÌçºÏÑºÌä∏ Í∏∞Ï§Ä')
    pyramiding_value = settings.get('pyramiding_value', 3.0)
    pyramiding_limit = settings.get('pyramiding_limit', 3)
    entry_criterion = settings.get('entry_criterion', 'ÌèâÍ∑† Îã®Í∞Ä')

    if entry_criterion == "ÌèâÍ∑† Îã®Í∞Ä":
        entry_price = entry_price
    else:
        entry_price = last_filled_price
        
    print(f"[{user_id}] üñ§entry_price: {entry_price}")
    #print(f"[{user_id}] entry_criterion : {entry_criterion}\n last_filled_price : {last_filled_price}\n current_price : {current_price}")
    dca_levels = []
    if pyramiding_entry_type == "ÌçºÏÑºÌä∏ Í∏∞Ï§Ä":
        if side == "long":
            level = entry_price * (1 - (pyramiding_value/100))
        else:
            level = entry_price * (1 + (pyramiding_value/100))
    elif pyramiding_entry_type == "Í∏àÏï° Í∏∞Ï§Ä":
        if side == "long":
            level = entry_price - (pyramiding_value)
        else:
            level = entry_price + (pyramiding_value)
    else:  # ATR Í∏∞Ï§ÄÏù¥Îùº Í∞ÄÏ†ï
        #print("ATR Í∏∞Ï§ÄÏúºÎ°ú Í≥ÑÏÇ∞") #<-- Î¨∏Ï†ú ÏóÜÏùå. 
        # Ïã§Ï†ú ATR Í≥ÑÏÇ∞ Î°úÏßÅÏùÄ Î≥ÑÎèÑ
        if side == "long":
            level = entry_price - (atr_value * (pyramiding_value))
        else:
            level = entry_price + (atr_value * (pyramiding_value))
    dca_levels.append(level)

    return dca_levels

async def update_dca_levels_redis(user_id: str, symbol: str, dca_levels: list, side: str):
    dca_key = f"user:{user_id}:position:{symbol}:{side}:dca_levels"
    await redis_client.delete(dca_key)
    if dca_levels:
        await redis_client.rpush(dca_key, *[str(level) for level in dca_levels])

async def check_dca_condition(current_price: float, dca_levels: list, side: str, use_check_DCA_with_price: bool) -> bool:
    if use_check_DCA_with_price:
        if not dca_levels:
            return False
        next_dca_level = float(dca_levels[0])
        if side == "long":
            return current_price <= next_dca_level
        else:
            return current_price >= next_dca_level
    else:
        return True 